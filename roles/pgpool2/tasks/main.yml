---
- name: Including PostgreSQL Variables
  include_vars:
    file: ../../postgresql/defaults/main.yml
- name: Checking if Database Cluster Exists
  stat:
    path: "{{ postgresql_data_directory }}/PG_VERSION"
  delegate_to: "{{ item }}"
  register: _pg_version
  loop: "{{ groups.postgresql }}"
- name: Aborting if Database Cluster Does Not Exist
  fail:
    msg: Database Cluster Does Not Exist
  when: false in (_pg_version.results | map(attribute='stat.exists'))
- name: Including Tasks for Installing PostgreSQL Repository
  include_tasks:
    file: ../../postgresql/tasks/repo.yml
- name: Installing PostgreSQL Server
  yum:
    name: postgresql{{ postgresql_version }}-server
- name: Including Tasks for Installing Pgpool-II Repository
  include_tasks:
    file: repo.yml
- name: Installing Pgpool-II Server
  yum:
    name: pgpool-II-pg{{ postgresql_version }}
    enablerepo: crb
- name: Editing pgpool.conf File
  blockinfile:
    path: /etc/pgpool-II/pgpool.conf
    block: |
      listen_addresses = '*'
      port = {{ pgpool2_port }}
      pcp_listen_addresses = '*'
      pcp_port = {{ pgpool2_pcp_port }}
      {% for host in groups.postgresql %}
      backend_hostname{{ loop.index0 }} = '{{ host }}'
      backend_port{{ loop.index0 }} = {{ postgresql_port }}
      backend_weight{{ loop.index0 }} = 1
      backend_data_directory{{ loop.index0 }} = '{{ postgresql_data_directory }}'
      backend_application_name{{ loop.index0 }} = '{{ host }}'
      {% endfor %}
      enable_pool_hba = on
      {% if postgresql_ssl_enabled %}
      ssl = on
      ssl_key = 'server.key'
      ssl_cert = 'server.crt'
      {% endif %}
      sr_check_user = '{{ pgpool2_monitor_role }}'
      health_check_period = 5
      health_check_timeout = 30
      health_check_user = '{{ pgpool2_monitor_role }}'
      health_check_max_retries = 3
      failover_command = '/etc/pgpool-II/failover.sh %d %h %p %D %m %H %M %P %r %R %N %S'
      follow_primary_command = '/etc/pgpool-II/follow_primary.sh %d %h %p %D %m %H %M %P %r %R'
      recovery_user = '{{ postgresql_user }}'
      recovery_1st_stage_command = 'recovery_1st_stage'
      {% if pgpool2_watchdog_enabled %}
      use_watchdog = on
      {% for host in groups.pgpool2 %}
      hostname{{ loop.index0 }} = '{{ host }}'
      wd_port{{ loop.index0 }} = {{ pgpool2_watchdog_port }}
      pgpool_port{{ loop.index0 }} = {{ pgpool2_port }}
      {% endfor %}
      delegate_ip = '{{ pgpool2_virtual_ip }}'
      if_up_cmd = '/usr/bin/sudo /sbin/ip addr add $_IP_$/24 dev {{ public_interface }} label {{ public_interface }}:0'
      if_down_cmd = '/usr/bin/sudo /sbin/ip addr del $_IP_$/24 dev {{ public_interface }}'
      arping_cmd = '/usr/bin/sudo /usr/sbin/arping -U $_IP_$ -w 1 -I {{ public_interface }}'
      wd_escalation_command = '/etc/pgpool-II/escalation.sh'
      enable_consensus_with_half_votes = {{ ((groups.pgpool2 | length) % 2 == 0) | ternary('on', 'off') }}
      {% for host in groups.pgpool2 %}
      heartbeat_hostname{{ loop.index0 }} = '{{ host }}'
      heartbeat_port{{ loop.index0 }} = {{ pgpool2_heartbeat_port }}
      {% endfor %}
      {% endif %}
- name: Creating Unix Socket Directory
  file:
    path: /var/run/postgresql
    state: directory
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0755
- name: Including Tasks for Adding SSH Public Key
  include_tasks:
    file: authkey.yml
  vars:
    hosts: "{{ groups.postgresql }}"
- name: Copying Failover Scripts
  copy:
    src: /etc/pgpool-II/sample_scripts/{{ item }}.sample
    dest: /etc/pgpool-II/{{ item }}
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0700
    remote_src: true
    force: false
  loop:
    - failover.sh
    - follow_primary.sh
- name: Setting Variables in Failover Scripts
  lineinfile:
    path: /etc/pgpool-II/{{ item.0 }}
    regexp: ^({{ item.1.name }}=).*
    line: \g<1>{{ item.1.value }}
    backrefs: true
  loop: "{{ files | product(shvars) }}"
  vars:
    files:
      - failover.sh
      - follow_primary.sh
    shvars:
      - name: PGHOME
        value: "/usr/pgsql-{{ postgresql_version }}"
      - name: REPLUSER
        value: "{{ postgresql_replication_role }}"
      - name: PCP_USER
        value: "{{ pgpool2_pcp_user }}"
      - name: PCP_PORT
        value: "{{ pgpool2_pcp_port }}"
      - name: POSTGRESQL_STARTUP_USER
        value: "{{ postgresql_user }}"
      - name: SSH_KEY_FILE
        value: "{{ pgpool2_ssh_key_filename }}"
- name: Setting Authentication Method in pool_hba.conf File
  replace:
    path: /etc/pgpool-II/pool_hba.conf
    regexp: ^((local|host)\s+all\s+all\s+((127\.0\.0\.1/32|::1/128)\s+)?)trust
    replace: "\\1{{ postgresql_auth_method}}"
- name: Editing pool_hba.conf File
  blockinfile:
    path: /etc/pgpool-II/pool_hba.conf
    block: |
      {{ postgresql_ssl_enabled | ternary('hostssl', 'host') }} all all samenet {{ postgresql_auth_method }}
- name: Including Tasks for Generating SSL Certificate
  include_tasks:
    file: ../../postgresql/tasks/sslcert.yml
  vars:
    directory: /etc/pgpool-II
  when: postgresql_ssl_enabled
- block:
    - name: Generating .pgpoolkey File
      lineinfile:
        path: "{{ postgresql_home_directory }}/.pgpoolkey"
        line: "{{ pgpool2_encryption_key }}"
        owner: "{{ postgresql_user }}"
        group: "{{ postgresql_group }}"
        mode: 0600
        create: true
    - name: Encrypting Password
      command:
        cmd: pg_enc -k {{ postgresql_home_directory }}/.pgpoolkey {{ item }}
      register: _pg_enc
      loop:
        - "{{ postgresql_password }}"
        - "{{ pgpool2_monitor_password }}"
      changed_when: false
    - name: Adding Encrypted Password to pool_passwd File
      blockinfile:
        path: /etc/pgpool-II/pool_passwd
        block: |
          {{ postgresql_user }}:{{ _pg_enc.results.0.stdout_lines[-1].split(' ')[-1] }}
          {% if pgpool2_monitor_role != postgresql_user %}
          {{ pgpool2_monitor_role }}:{{ _pg_enc.results.1.stdout_lines[-1].split(' ')[-1] }}
          {% endif %}
    - name: Generating .pgpass File
      blockinfile:
        path: "{{ postgresql_home_directory }}/.pgpass"
        block: |
          *:{{ postgresql_port }}:*:{{ postgresql_user }}:{{ postgresql_password }}
          {% if postgresql_replication_role != postgresql_user %}
          *:{{ postgresql_port }}:*:{{ postgresql_replication_role }}:{{ postgresql_replication_password }}
          {% endif %}
        owner: "{{ postgresql_user }}"
        group: "{{ postgresql_group }}"
        mode: 0600
        create: true
    - name: Adding Pgpool-II Connection Entry to .pgpass File
      lineinfile:
        path: "{{ postgresql_home_directory }}/.pgpass"
        line: "*:{{ pgpool2_port }}:*:{{ postgresql_user }}:{{ postgresql_password }}"
      delegate_to: "{{ item }}"
      loop: "{{ groups.all }}"
      run_once: true
  when: postgresql_password != ''
- block:
    - name: Creating Monitor Role
      command:
        cmd: /usr/pgsql-{{ postgresql_version }}/bin/psql -c "CREATE ROLE {{ pgpool2_monitor_role }} LOGIN PASSWORD '{{ pgpool2_monitor_password }}' IN ROLE pg_monitor" -h {{ postgresql_primary_server }} -p {{ postgresql_port }}
      become_user: "{{ postgresql_user }}"
      register: _psql
      changed_when: _psql.rc == 0
      failed_when: _psql.rc != 0 and _psql.stderr is not search('already exists')
    - name: Including Tasks for Installing Pgpool-II Repository
      include_tasks:
        file: repo.yml
        apply:
          delegate_to: "{{ item }}"
      loop: "{{ groups.postgresql }}"
    - name: Installing Pgpool-II Extensions
      yum:
        name: pgpool-II-pg{{ postgresql_version }}-extensions
        enablerepo: crb
        disablerepo: pgdg*
      delegate_to: "{{ item }}"
      loop: "{{ groups.postgresql }}"
    - name: Creating pgpool_recovery Extension
      command:
        cmd: /usr/pgsql-{{ postgresql_version }}/bin/psql -c "CREATE EXTENSION IF NOT EXISTS pgpool_recovery" -h {{ postgresql_primary_server }} -p {{ postgresql_port }} template1
      become_user: "{{ postgresql_user }}"
      register: _psql
      changed_when: _psql.stderr is not search('already exists, skipping')
    - name: Including Tasks for Adding SSH Public Key
      include_tasks:
        file: authkey.yml
        apply:
          delegate_to: "{{ item }}"
      loop: "{{ groups.postgresql }}"
      vars:
        hosts: "{{ groups.postgresql }}"
    - name: Checking if Recovery Scripts Exist
      stat:
        path: "{{ postgresql_data_directory }}/{{ item.0 }}"
      delegate_to: "{{ item.1 }}"
      register: _stat
      loop: "{{ files | product(groups.postgresql) }}"
      vars:
        files:
          - recovery_1st_stage
          - pgpool_remote_start
    - name: Copying Recovery Scripts
      command:
        cmd: scp -i {{ postgresql_home_directory}}/.ssh/{{ pgpool2_ssh_key_filename }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null /etc/pgpool-II/sample_scripts/{{ item.item.0 }}.sample {{ item.item.1 }}:{{ postgresql_data_directory }}/{{ item.item.0 }}
      become_user: "{{ postgresql_user }}"
      when: not item.stat.exists
      loop: "{{ _stat.results }}"
    - name: Setting Variables in Recovery Scripts
      lineinfile:
        path: "{{ postgresql_data_directory }}/{{ item.0 }}"
        regexp: ^({{ item.1.name }}=).*
        line: \g<1>{{ item.1.value }}
        backrefs: true
      delegate_to: "{{ item.2 }}"
      loop: "{{ files | product(shvars) | product(groups.postgresql) | map('flatten', levels=1) }}"
      vars:
        files:
          - recovery_1st_stage
          - pgpool_remote_start
        shvars:
          - name: PGHOME
            value: "/usr/pgsql-{{ postgresql_version }}"
          - name: REPLUSER
            value: "{{ postgresql_replication_role }}"
          - name: POSTGRESQL_STARTUP_USER
            value: "{{ postgresql_user }}"
          - name: SSH_KEY_FILE
            value: "{{ pgpool2_ssh_key_filename }}"
  run_once: true
- block:
    - name: Adding Virtual IP Entry to /etc/hosts File
      lineinfile:
        path: /etc/hosts
        line: "{{ pgpool2_virtual_ip }} {{ pgpool2_virtual_hostname }} {{ pgpool2_virtual_hostname }}.{{ ansible_fqdn.split('.')[1:] | join('.') }}"
      delegate_to: "{{ item }}"
      loop: "{{ groups.all }}"
      run_once: true
    - name: Setting Node ID in pgpool_node_id File
      lineinfile:
        path: /etc/pgpool-II/pgpool_node_id
        line: "{{ groups.pgpool2.index(ansible_hostname) }}"
    - name: Copying Wtachdog Scripts
      copy:
        src: /etc/pgpool-II/sample_scripts/escalation.sh.sample
        dest: /etc/pgpool-II/escalation.sh
        owner: "{{ postgresql_user }}"
        group: "{{ postgresql_group }}"
        mode: 0700
        remote_src: true
        force: false
    - name: Setting Variables in Watchdog Scripts
      lineinfile:
        path: /etc/pgpool-II/escalation.sh
        regexp: ^({{ item.name }}=).*
        line: \g<1>{{ item.value }}
        backrefs: true
      loop:
        - name: POSTGRESQL_STARTUP_USER
          value: "{{ postgresql_user }}"
        - name: SSH_KEY_FILE
          value: "{{ pgpool2_ssh_key_filename }}"
        - name: PGPOOLS
          value: "({{ groups.pgpool2 | join(' ') }})"
        - name: VIP
          value: "{{ pgpool2_virtual_ip }}"
        - name: DEVICE
          value: "{{ public_interface }}"
  when: pgpool2_watchdog_enabled
- name: Generating PCP Password
  command:
    cmd: pg_md5 {{ pgpool2_pcp_password }}
  register: _pg_md5
  changed_when: false
- name: Adding PCP User Entry to pcp.conf File
  lineinfile:
    path: /etc/pgpool-II/pcp.conf
    line: "{{ pgpool2_pcp_user }}:{{ _pg_md5.stdout }}"
- name: Generating .pcppass File
  lineinfile:
    path: "{{ postgresql_home_directory }}/.pcppass"
    line: "*:{{ pgpool2_pcp_port }}:{{ pgpool2_pcp_user }}:{{ pgpool2_pcp_password }}"
    owner: "{{ postgresql_user }}"
    group: "{{ postgresql_group }}"
    mode: 0600
    create: true
  delegate_to: "{{ item }}"
  loop: "{{ groups.all }}"
  run_once: true
- name: Starting Pgpool-II Server
  service:
    name: pgpool
    state: started
